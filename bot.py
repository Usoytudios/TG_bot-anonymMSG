import logging
import asyncio
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TOKEN
import db


db.create_tables()


logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"User_{user_id}"
    db.add_user(user_id, username)
    agree_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")]
    ])
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.\n\n"
        "üìå –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:\n"
        "- –¢—ã –ø–∏—à–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
        "- –°–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ, –±–µ–∑ –∏–º–µ–Ω.\n"
        "- –ó–∞ —Ñ–ª—É–¥ –±–æ—Ç –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è.\n\n"
        "‚ùó –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–°–æ–≥–ª–∞—Å–µ–Ω¬ª, —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å –≤—Å–µ —Ä–∏—Å–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞."
    )
    await message.answer(text, reply_markup=agree_button)

@router.callback_query(lambda c: c.data == "agree")
async def agree_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    db.update_agreement(user_id, True)
    db.set_active(user_id, True)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, "‚úÖ –¢—ã —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")


@router.message(lambda message: message.text is not None)
async def forward_message(message: types.Message):
    sender_id = message.from_user.id
    receiver_id = db.get_random_active_user(sender_id)
    if receiver_id is None:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    db.add_message(sender_id, receiver_id, message.text)
    await bot.send_message(receiver_id, f"–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}")


dp.include_router(router)


async def monitor_spam():
    from datetime import timedelta, datetime
    CHECK_INTERVAL = 30  
    MAX_MESSAGES_PER_MINUTE = 100
    while True:
        conn = db.connect()
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users WHERE active = 1")
        active_users = cursor.fetchall()
        conn.close()
        for (user_id,) in active_users:
            time_threshold = (datetime.now() - timedelta(minutes=1)).strftime("%Y-%m-%d %H:%M:%S")
            conn = db.connect()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM messages WHERE sender_id = ? AND timestamp >= ?", (user_id, time_threshold))
            count = cursor.fetchone()[0]
            conn.close()
            if count > MAX_MESSAGES_PER_MINUTE:
                db.set_active(user_id, False)
                await bot.send_message(user_id, "–í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.")
        await asyncio.sleep(CHECK_INTERVAL)

async def on_start():
    asyncio.create_task(monitor_spam())
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(on_start())
